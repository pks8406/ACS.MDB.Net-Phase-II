@model IEnumerable<ACS.MDB.Net.App.Models.InflationIndex>

@{
    ViewBag.Title = "MDB::Inflation Index";
}

<style type="text/css">
    div#spinner
    {
        display: none;
        width: 100%;
        height: 100%;
        position: fixed;
        text-align: center;
        border: 0px;
        vertical-align: central;
        left: 0;
        top: 0;
        z-index: 1000;
        background: rgba( 255, 255, 255, .8 ) url('/Images/Loading.gif') 50% 50% no-repeat;
    }
</style>

@section Scripts {
    <script src="/Scripts/jquery.dataTables.js" type="text/javascript"></script>
    <script src="/Scripts/jquery.dataTable.editTable.js" type="text/javascript"></script>
    <script type="text/javascript" charset="utf-8">

        // The inflaiton index data table
        var inflationIndexTbl = null;

        // The inflation index data table
        var inflationIndexRateTbl = null;

        //The Recalculation data table
        var recalculationTbl = null;

        var selectedIndexId = 0;
        var selectedIndexName = '';
        var rowId = 0;

        //columnDef for Inflation Index Table
        var columnDefsinflationIndexTbl = [
            { sWidth: '1%', bSortable: false, aTargets: [0] },
            { bVisible: false, aTargets: [1] },
            {
                sWidth: '8%',
                bSortable: true,
                aTargets: [2],
                "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
                    OpenEditDialog(inflationIndexTbl, iRow, nTd, sData);
                }
            },
            { sWidth: '22%', bSortable: true, aTargets: [3] },
            { sWidth: '7%', bSortable: true, aTargets: [4] }
        ];

        //columnDef for Inflation Index Rate Table
        var columnDefsinflationIndexRateTbl = [
            { sWidth: '1%', bSortable: false, aTargets: [0] },
            { bVisible: false, aTargets: [1] },
            {
                sWidth: '15%',
                bSortable: true,
                aTargets: [2],
                "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
                    OpenEditDialog(inflationIndexRateTbl, iRow, nTd, sData);
                }
            },
            { sWidth: '15%', sClass: 'right-align', bSortable: true, aTargets: [3] },
            { sWidth: '20%', sClass: 'right-align', bSortable: true, aTargets: [4] }
        ];

        //columnDef for Recalculation Table
        var columnDefsrecalculationTbl = [
            //{ sWidth: '1%', bSortable: false, aTargets: [0] },
            //{ bVisible: false, aTargets: [1] },
            //{ sWidth: '35%', bSortable: true, aTargets: [2] },
            //{ sWidth: '25%', bSortable: true, aTargets: [3] },
            //{
            //    sWidth: '25%',
            //    bSortable: true,
            //    aTargets: [4],
            //    "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
            //        OpenErrorLog(nTd, sData, oData);
            //    }
            //},
            //{ sWidth: '1%', bVisible: false, aTargets: [5] }

            { sWidth: '1%', bSortable: false, aTargets: [0] },
            { bVisible: false, aTargets: [1] },
            { bSortable: true, aTargets: [2] },
            { bSortable: true, aTargets: [3] },
            {
                bSortable: true,
                aTargets: [4],
                "fnCreatedCell": function (nTd, sData, oData, iRow, iCol) {
                    OpenErrorLog(nTd, sData, oData);
                }
            },
            { bVisible: false, aTargets: [5] },
            { bVisible: false, aTargets: [6] }
        ];


        //Function to provide hyperlink to open edit pop up on each row in datatable
        function OpenErrorLog(nTd, sData, oData) {
            if (sData == '@ACS.MDB.Net.App.Common.Constants.COMPLETED_WITH_ERRORS') {
                //var b = $('<a href=' + '/Administration/Download' + '>' + sData + '</a>');

                var b = $('<a href=' + '/Administration/Download?filePath=' + oData[5] + '>' + sData + '</a>');

                b.on('click', function () {
                    //To Check file Exists or not
                    if (oData[6] == false)
                    {
                        alert("File Not Exists");
                        return false;
                    }                    
                });

                $(nTd).empty();
                $(nTd).prepend(b);
                $(nTd).css('padding-left', '7px');
            }
            else {
                sData;
            }
        }

        //setup the table and other features required for this page
        $(document).ready(function () {
            //Disable cache
            $.ajaxSetup({ cache: false });

            inflationIndexTbl = $('#inflationIndex_tbl').editTable({
                sListURL: '/Administration/InflationIndexList',
                sDeleteURL: '/Administration/InflationIndexDelete',
                sAddURL: '/Administration/InflationIndexSave',
                sUpdateURL: '/Administration/InflationIndexSave',
                sNewDialogLoadURL: '/Administration/InflationIndexCreate',
                sEditDialogLoadURL: '/Administration/InflationIndexEdit',
                sDialogDivId: 'InflationIndex_dialog',
                sToolbarSelector: '#div_toolbar_inflationIndex',
                sAddButtonId: 'btn_newInflationIndex',
                sEditButtonId: 'btn_editInflationIndex',
                sDeleteButtonId: 'btn_deleteInflationIndex',
                iDialogWidth: 400,
                iDialogHeight: 250,
                iDialogOffset: 500,
                bAutoWidth: false,
                oColumnDefs: columnDefsinflationIndexTbl,
                fnRowSelected: UpdateInflationIndexRates,
                fnAfterDelete: UpdateInflationIndexRatesAfterDelete,
                sEntityName: 'Inflation Index',
                sCheckBoxItemSelector: '#selectInflationIndex',
                fnServerData: inflationIndexListParameter,
                sDeleteMessage: '@ACS.MDB.Net.App.Common.Constants.DELETE_MESSAGE_FOR_INDEX'
            });

            //Set default focus on search text box and Disable invalid keys for search text box (Keys like <,>,~)
            SetFocus('#inflationIndex_tbl_filter label input:text');
            DisableInvalidKeyForControl('#inflationIndex_tbl_filter label input:text');


            ///For InflationIndexRate Table
            inflationIndexRateTbl = $('#inflationIndexRate_tbl').editTable({
                sListURL: '/Administration/GetinflationIndexRateListById',
                fnServerData: inflationIndexRateListParameter,
                sDeleteURL: '/Administration/InflationIndexRateDelete',
                sAddURL: '/Administration/InflationIndexRateSave',
                sUpdateURL: '/Administration/InflationIndexRateSave',
                sNewDialogLoadURL: '/Administration/InflationIndexRateCreate',
                sEditDialogLoadURL: '/Administration/InflationIndexRateEdit',
                sDialogDivId: 'InflationIndexRate_dialog',
                sToolbarSelector: '#div_toolbar_InflationIndexRate',
                sAddButtonId: 'btn_newInflationIndexRate',
                sEditButtonId: 'btn_editInflationIndexRate',
                sDeleteButtonId: 'btn_deleteInflationIndexRate',
                iDialogWidth: 550,
                iDialogHeight: 270,
                bAutoWidth: false,
                oColumnDefs: columnDefsinflationIndexRateTbl,
                sEntityName: 'Inflation Index Rate',
                sCheckBoxItemSelector: '#selectInflationIndexRate'
            });

            //Disable invalid keys for search text box (Keys like <,>,~)
            DisableInvalidKeyForControl('#inflationIndexRate_tbl_filter label input:text');
            //Hide new/edit/delete button toolbar for inflation index rate table
            inflationIndexRateTbl.fnShowToolBar(false);
            //$('#tblIndexDescription').hide();

            //Disable dialog-message
            //$('#Recalculation-dialog-message').hide();

            ///For Recalculation Table
            recalculationTbl = $('#recalculation_tbl').editTable({
                sListURL: '/Administration/GetRecalculationRequestList',
                fnServerData: recalculationListParameter,
                sDeleteURL: '/Administration/RecalculationDelete',
                //sAddURL: '/Administration/InflationIndexRateSave',
                //sUpdateURL: '/Administration/InflationIndexRateSave',
                //sNewDialogLoadURL: '/Administration/InflationIndexRateCreate',
                //sEditDialogLoadURL: '/Administration/InflationIndexRateEdit',
                //sDialogDivId: 'InflationIndexRate_dialog',
                sToolbarSelector: '#div_toolbar_recalculation',
                //sAddButtonId: 'btn_newInflationIndexRate',
                //sEditButtonId: 'btn_editInflationIndexRate',
                sDeleteButtonId: 'btn_deleteRecalculation',
                //iDialogWidth: 550,
                //iDialogHeight: 300,
                //bAutoWidth: false,
                iDisplayLength: 5,
                oColumnDefs: columnDefsrecalculationTbl,
                sDeleteMessage: '@ACS.MDB.Net.App.Common.Constants.DELETE_MESSAGE_FOR_RECALCULATION'
                //sEntityName: 'Inflation Index Rate',
                //sCheckBoxItemSelector: '#selectInflationIndexRate'
            });

            //Hide Search TextBox
            $('#recalculation_tbl_filter').hide();
            $('#recalculation_tbl_length').hide();
            $("#div_toolbar_recalculation").hide();

            ///To Auto Refresh the Recalculation Table after given time interval 
            setInterval(function () {
                recalculationTbl.fnDraw(false);
            }, 60000);

            //Code to Expand or collapse Recalculation Status request grid
            $('#accordion').hide();
            $("#RecalculationGrid").click(function () {
                $('#accordion').slideToggle("slow");
                $("#title").text($('#title').text() == "Collapse Recalculation" ? "Expand Recalculation" : "Collapse Recalculation");

                if ($("#title").text() == "Expand Recalculation") {
                    document.getElementById('imgExpandCollapse').src = "../Images/details_open.png";
                    $("#div_toolbar_recalculation").hide();
                }
                else if ($("#title").text() == "Collapse Recalculation") {
                    document.getElementById('imgExpandCollapse').src = "../Images/details_close.png";
                    $("#div_toolbar_recalculation").show();
                }
            });


            // This function returns the index of the row selected from
            // the datatable.

            function fnGetSelectedRowIndex() {
                var index = -1;
                var aTrs = inflationIndexTbl.fnGetNodes();

                for (var i = 0; i < aTrs.length; i++) {
                    if ($(aTrs[i]).hasClass('row_selected')) {
                        index = i;
                        break;
                    }
                }
                return index;
            }

            //Updates the inflationIndexRate grid when InflationIndex gets selected

            function UpdateInflationIndexRates() {

                //rowId = $('#inflationIndex_tbl').find('tr.row_selected').index();

                rowId = fnGetSelectedRowIndex();

                if (rowId != -1) {
                    //Set default focus on search text box
                    SetFocus('#inflationIndexRate_tbl_filter label input:text');

                    //$('#tblIndexDescription').show();

                    inflationIndexRateTbl.fnPageChange(0, false);
                    inflationIndexRateTbl.fnShowToolBar(true);

                    //get inflation index id and index name
                    selectedIndexId = inflationIndexTbl.fnGetData(rowId, 1);
                    selectedIndexName = inflationIndexTbl.fnGetData(rowId, 2);
                }

                //$('#txtIndexName').html(selectedIndexName);

                var newDialaogUrl = '/Administration/InflationIndexRateCreate?inflationIndexId=' + selectedIndexId + '&inflationIndexName=' + escape(selectedIndexName);
                inflationIndexRateTbl.fnSetNewDialogURL(newDialaogUrl);
                inflationIndexRateTbl.fnDraw(false);
            }

            //Updates the inflationIndexRate grid when InflationIndex gets deleted

            function UpdateInflationIndexRatesAfterDelete() {

                //set default focus on search text box
                $('#inflationIndex_tbl_filter label input:text').focus();

                inflationIndexRateTbl.fnShowToolBar(false);
                inflationIndexRateTbl.fnDraw(false);
            }

            //Add the additional data to be sent to the server

            function inflationIndexRateListParameter(sSource, aoData, fnCallBack) {
                aoData.push({ "name": "inflationIndexId", "value": selectedIndexId });
                $.getJSON(sSource, aoData, function (json) {
                }).done(function (json) {

                    fnCallBack(json);

                    //To set checkbox column header selector to false
                    inflationIndexRateTbl.fnSetCheckBoxItemSelector();

                }).fail(function (json) {
                    DisplayErrorMessage(json, false);
                });
            }

            //Function to set checkbox column header selector to false
            //Call after we do sorting,paging,searching, save (create/edit) of record

            function inflationIndexListParameter(sSource, aoData, fnCallBack) {

                $.getJSON(sSource, aoData, function (json) {
                }).done(function (json) {
                    fnCallBack(json);

                    //To set checkbox column header selector to false
                    inflationIndexTbl.fnSetCheckBoxItemSelector();

                    //$('#tblIndexDescription').hide();

                    //Clear inflation index rate table
                    ClearInflationIndexRateTable(aoData);
                }).fail(function (json) {
                    DisplayErrorMessage(json, false);
                });
            }

            //
            function recalculationListParameter(sSource, aoData, fnCallBack) {

                $.getJSON(sSource, aoData, function (json) {
                }).done(function (json) {
                    fnCallBack(json);

                    //To set checkbox column header selector to false
                    recalculationTbl.fnSetCheckBoxItemSelector();

                    //$('#tblIndexDescription').hide();

                    //Clear inflation index rate table
                    //ClearInflationIndexRateTable(aoData);
                }).fail(function (json) {
                    DisplayErrorMessage(json, false);
                });
            }

            //Function to clear inflation index rate table

            function ClearInflationIndexRateTable(aoData) {

                selectedIndexId = 0;
                //$.getJSON('/Administration/GetinflationIndexRateListById?inflationIndexId=' + selectedIndexId, aoData, function (json) {
                //    inflationIndexRateTbl.fnShowToolBar(false);
                //    inflationIndexRateTbl.fnDraw(false);
                //});
                inflationIndexRateTbl.fnClearTable(true);
                inflationIndexRateTbl.fnShowToolBar(false);
            }

        });

        // Function that returns an array of IDs for rows whose
        // check boxes have been checked.

        function fnGetSelectedIds() {
            var selectedIds = new Array();

            //get all the nodes whose check boxes have been checked
            var inputCheckBoxes = $('input:checked', inflationIndexTbl.fnGetNodes());
            if (inputCheckBoxes != null) {
                //iterate over the checkboxes and set the return the row id
                for (var i = 0; i < inputCheckBoxes.length; i++) {
                    selectedIds[i] = $(inputCheckBoxes[i]).val();
                }
            }

            return selectedIds;
        }

        //Function to Update Recalculation Grid
        function UpdateRecalculationGrid() {
            $.ajax({
                url: '/Administration/GetRecalculationRequestList',
                type: 'POST',
                //data: postData,
                cache: false,
                //async: true,
                traditional: true,
                success: function (entityObj) {
                    recalculationTbl.fnDraw(false);
                },
                error: function (response, status, error) {
                    //Display error message
                    DisplayErrorMessage(response, true);
                }
            });
        }

        // Recalculate milestone for non index
        function RecalculateNonIndex() {
            //$("#spinnerForInflationIndex").show();
            //ShowProgress("spinnerForInflationIndex");
            //var postData = { ids: selectedIds };
            $.ajax({
                url: '/Administration/RecalculateForNonIndex',
                type: 'POST',
                //data: postData,
                cache: false,
                //async: true,
                traditional: true,
                success: function (entityObj) {
                    UpdateRecalculationGrid();
                },

@*                    HideProgress("spinnerForInflationIndex");
                    $("#spinnerForInflationIndex").hide();
                    OpenDialog("Recalculation-dialog-message", 400, 150,null);
                    $("#Recalculation-dialog-message").dialog({
                        modal: true,
                        title: '@ACS.MDB.Net.App.Common.Constants.RECALCULATION_DONE_SUCCESSFULLY_FOR_UPLIFT_NOT_REQUIRED',
                        resizable: false,
                        closeOnEscape: false,
                        width: 400,
                        height: 150,
                        open: function (event, ui) {
                            $('body').css('overflow', 'hidden'); $('.ui-widget-overlay').css('width', '100%');
                            $('.ui-dialog-titlebar-close').css('display', 'none');
                        },
                        close: function (event, ui) {
                            $('body').css('overflow', 'auto');
                        },
                        buttons: {
                            Ok: function () {
                                $(this).dialog("close");
                                //RedirectToContractDetails(entityObj);
                            }
                        },
                 )};*@

                error: function (response, status, error) {
                    //HideProgress("spinnerForInflationIndex");
                    //$("#spinnerForInflationIndex").hide();
                    //Display error message
                    DisplayErrorMessage(response, true);
                }
            });
        }

        //Recalculate milestone for selected charging indexs
        function Recalculate() {
            var selectedIds = fnGetSelectedIds();

            if (selectedIds.length <= 0) {
                alert("Please select record(s).");
            } else {

                //$("#spinnerForInflationIndex").show();
                //ShowProgress("spinnerForInflationIndex");
                var postData = { ids: selectedIds };
                $.ajax({
                    url: '/Administration/Recalculate',
                    type: 'POST',
                    data: postData,
                    cache: false,
                    //async: true,
                    traditional: true,
                    success: function (entityObj) {
                        UpdateRecalculationGrid();
                        inflationIndexTbl.fnDraw(false);
                    },
@*                    HideProgress("spinnerForInflationIndex");
                    $("#spinnerForInflationIndex").hide();
                    $("#Recalculation-dialog-message").dialog({
                        modal: true,
                        title: '@ACS.MDB.Net.App.Common.Constants.RECALCULATION_DONE_SUCCESSFULLY_FOR_UPLIFT_REQUIRED',
                        resizable: false,
                        closeOnEscape: false,
                        width: 350,
                        height: 150,
                        open: function (event, ui) {
                            $('body').css('overflow', 'hidden'); $('.ui-widget-overlay').css('width', '100%');
                            $('.ui-dialog-titlebar-close').css('display', 'none');
                        },
                        close: function (event, ui) {
                            $('body').css('overflow', 'auto');
                        },
                        buttons: {
                            Ok: function () {
                                $(this).dialog("close");
                                //RedirectToContractDetails(entityObj);
                            }
                        },
                    });*@
                    error: function (response, status, error) {
                        //HideProgress("spinnerForInflationIndex");
                        //$("#spinnerForInflationIndex").hide();
                        //Display error message
                        DisplayErrorMessage(response, true);
                    }
                });
            }
        }


        //Set the menu item as selected
        HighlightSelectedMenuItem("AdminMenu");
    </script>
}


<div class="pageTitle">
    Manage Inflation Index
        <hr />
</div>

@*Code to show Recalculation Status request grid*@
<table style="width: 100%">
    <tr>
        <td style="width: 80%;">

            <div id="RecalculationGrid" style="cursor: pointer; width: 20%">
                <br />
                <img id="imgExpandCollapse" src="~/Images/details_open.png">
                <b><a id="title">Expand Recalculation</a></b>
            </div>
        </td>

        <td style="vertical-align:bottom">
            <div id='div_toolbar_recalculation' class="DatatableGridButtonStyle" style="margin-bottom: 0px; margin-top: 0px;">
                <button id="btnRefresh" onclick="UpdateRecalculationGrid();return false;"
                    style= "clear: both; float: right;" value="Refresh">
                    Refresh
                </button>
            </div>
        </td>
    </tr>
</table>


<table style="width: 100%">
    <tr>
        <td>
            <div id="accordion">
                <table cellpadding="0" cellspacing="0" border="0" class="display" id="recalculation_tbl" width="100%">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" id="selectall" />
                            </th>
                            <th>@Html.DisplayNameFor(model => model.ID) </th>
                            <th>@Html.Label("Recalculation") </th>
                            <th>@Html.Label("Date") </th>
                            <th>@Html.Label("Status") </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
                <br />
            </div>
        </td>
    </tr>
</table>


@*<table id="tblIndexDescription">
    <tr>
        <td>
            <b>@Html.Label("Index Name :", new { @id = "lblIndex" }) </b>
        </td>
        <td>
            <div id="txtIndexName" style="color: #004bff" />
        </td>
    </tr>
</table>*@

@*<div style="text-align: right; padding-right: 0px">
    <input type="button" value="Recalculate" onclick="DisplayTempMessage();" />
</div>*@
<div id="calculatedMilestone">
</div>

<table style="width: 100%">
    <tr>
        <td style="vertical-align: top; width: auto">

            <div id='div_toolbar_inflationIndex' class="DatatableGridButtonStyle" style="margin-bottom: 10px; margin-top: 0px;">

                <button id="btnRecalculateNonIndex" style="float: right;" onclick="RecalculateNonIndex();" value="RecalculateNonIndex">
                    Recalculate For Uplift Not Required
                </button>
                <button id="btnRecalculate" style="float: right;" onclick="Recalculate();" value="Recalculate">
                    Recalculate For Uplift Required
                </button>
            </div>
            <div id="InflationIndex_dialog" title="Add Index"></div>
            <div id="calculatedMilestone_dialog" title="Recalculated Milestone"></div>
            <div id="InflationIndex">
                <table cellpadding="0" cellspacing="0" border="0" class="display" id="inflationIndex_tbl" width="100%">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" id="selectInflationIndex" />
                            </th>

                            <th>@Html.DisplayNameFor(model => model.ID) </th>
                            <th>@Html.DisplayNameFor(model => model.IndexName) </th>
                            <th>@Html.DisplayNameFor(model => model.Description) </th>
                            <th>@Html.DisplayNameFor(model => model.UseIndex) </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </td>

        <td style="vertical-align: top; width: auto">
            <div id='div_toolbar_InflationIndexRate' class="DatatableGridButtonStyle" style="margin-bottom: 10px; margin-top: 0px;"></div>
            <div id="InflationIndexRate_dialog" title="Add Indexrate"></div>
            @*For inflation index rate Table*@
            <div id="InflationIndexRate" style="margin-left: 30px">
                <table cellpadding="0" cellspacing="0" border="0" class="display" id="inflationIndexRate_tbl" width="100%">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" id="selectInflationIndexRate" />
                            </th>

                            <th>@Html.DisplayNameFor(model => model.ID) </th>
                            <th>@Html.DisplayNameFor(model => model.inflationIndexRateList[1].chargingUpliftDate) </th>
                            <th>@Html.DisplayNameFor(model => model.inflationIndexRateList[3].IndexRate) </th>
                            <th>@Html.DisplayNameFor(model => model.inflationIndexRateList[4].IndexRatePerAnnum) </th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </td>

        @* <td style="vertical-align: top">
            <div style="margin-left: 30px">
            </div>
        </td>*@
    </tr>
</table>

@*<div id="Recalculation-dialog-message">
    <p>
        @ACS.MDB.Net.App.Common.Constants.RECALCULATION_DONE_SUCCESSFULLY
    </p>
</div>*@

<div id="spinnerForInflationIndex" style="display: none; width: 100%; height: 100%; position: fixed; text-align: center; border: 0px; vertical-align: central; left: 0; top: 0; z-index: 1000; background: rgb(255,255,255) url('/Images/Loading.gif') 50% 50% no-repeat; -ms-filter: 'alpha(opacity = 50)'; filter: alpha(opacity=50); opacity: 0.6; }">
</div>
