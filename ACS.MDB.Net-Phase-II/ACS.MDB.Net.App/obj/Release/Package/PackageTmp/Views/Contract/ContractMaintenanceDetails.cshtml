@model ACS.MDB.Net.App.Models.ContractMaintenance

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/jquery.tooltip.js"></script>

<style type="text/css">
    td
    {
        padding: 1px;
        border: 0 none;
    }
</style>
<div style="background: #F9F7FB; padding-left: 10px">
    @using (Html.BeginForm())
    { 
        @Html.ValidationSummary(true)
        @Html.HiddenFor(m => m.ID)       
        @Html.HiddenFor(m => m.ContractId)
        @Html.HiddenFor(m => m.GroupId)
        @Html.HiddenFor(m => m.GroupName)
        @Html.HiddenFor(m => m.IsGrouped)
        @Html.HiddenFor(m => m.IsDefaultLineInGroup)
     
        <table style="width: 100%">
            <tr>
                <td colspan="4" style="vertical-align: top;">
                    <table style="width: 100%">
                        <tr>
                            <td colspan="2" style="width: 20.85%;">@Html.Label("Coding Details ", new { @class = "mandatoryLabel" })</td>

                            <td colspan="4">@Html.DropDownListFor(m => m.ContractLineId, new SelectList(Model.ContractLineList, "ID", "ContractLineDetails", Model.ContractLineId), "Select Coding Line", new { @id = "ddlContractLine", style = "width:530px;height:25px" })
                                @Html.HiddenFor(m => m.ContractLineId)

                            </td>
                        </tr>
                        <tr>

                            <td colspan="3">@Html.ValidationMessageFor(m => m.ContractLineId)
                        </tr>
                        <tr>
                            <td colspan="2">@Html.LabelFor(m => m.BaseAnnualAmount, new { @class = "mandatoryLabel", style = "width:250px" })</td>
                            <td style="width: 188px;">@Html.TextBoxFor(m => m.BaseAnnualAmount, new { @maxlength = "11", @id = "txtBaseAmount", @class = "MaintainceTextbox" })
                            </td>
                            <td style="width: 180px;">@Html.LabelFor(m => m.PeriodFrequencyId, new { @class = "mandatoryLabel", style = "width:250px" })</td>
                            <td>@Html.DropDownListFor(m => m.PeriodFrequencyId, new SelectList(Model.ChargingFrequencyList, "ID", "FrequencyName", Model.PeriodFrequencyId), "Select Charge Frequency", new { @id = "ddlPeriodFrequency", @class = "MaintainceDropDownListBox"  })
                                @Html.HiddenFor(m => m.PeriodFrequencyId)
                            </td>
                        </tr>
                        <tr>
                            <td colspan="3">@Html.ValidationMessageFor(m => m.BaseAnnualAmount)</td>
                            <td colspan="3">@Html.ValidationMessageFor(m => m.PeriodFrequencyId)</td>
                        </tr>

                        <tr>
                            <td colspan="2">@Html.LabelFor(m => m.FirstPeriodAmount, new { @class = "mandatoryLabel" })</td>
                            <td>@Html.TextBoxFor(m => m.FirstPeriodAmount, new { @id = "txtFirstPeriodAmount", @readonly = true, @class = "readOnlyTextBox" }) </td>
                            <td>@Html.LabelFor(m => m.FirstPeriodStartDate)</td>
                            <td>@Html.TextBoxFor(m => m.FirstPeriodStartDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.FirstPeriodStartDate), new { @id = "txtFirstPeriodStartDate", @class = "datepicker" })
                                @Html.HiddenFor(m => m.FirstPeriodStartDate, new { @id = "dtFirstPeriodStartDate" })
                            </td>
                        </tr>
                        <tr>
                            <td colspan="3">@Html.ValidationMessageFor(m => m.FirstPeriodAmount)</td>
                            <td colspan="2">@Html.ValidationMessageFor(m => m.FirstPeriodStartDate)</td>

                        </tr>

                        <tr>
                            <td colspan="2">@Html.LabelFor(m => m.FirstRenewalDate)</td>
                            <td>@Html.TextBoxFor(m => m.FirstRenewalDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.FirstRenewalDate), new { @id = "txtFirstRenewalDate", @class = "datepicker"  })
                                @Html.HiddenFor(m => m.FirstRenewalDate, new { @id = "dtFirstRenewalDate" })
                            </td>
                            <td>
                                @Html.LabelFor(m => m.QTY, new { @class = "mandatoryLabel" })
                            </td>
                            <td>
                                @Html.TextBoxFor(m => m.QTY, new { @id = "txtQty", @maxlength = "4", style = "width: 20%;"  })
                            </td>
                        </tr>
                        <tr>
                            <td colspan="3">@Html.ValidationMessageFor(m => m.FirstRenewalDate)</td>
                            <td colspan="2">@Html.ValidationMessageFor(m => m.QTY)</td>
                        </tr>
                    </table>
                </td>

                <td colspan="2" style="padding: 0px 20px 0px 0px; vertical-align: top;">
                    <fieldset style="width: auto; border: 1px solid black; height: auto;">
                        <legend>@Html.Label("Final Billing Period", new { style = "color: #23487d" }) </legend>
                        <table style="width: 100%">
                            <tr>
                                <td>
                                    @Html.LabelFor(m => m.FinalRenewalStartDate)
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.FinalRenewalStartDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.FinalRenewalStartDate), new { @id = "txtFinalRenewalStartDate", @class = "datepicker", style = "width:80px;" })
                                    @Html.HiddenFor(m => m.FinalRenewalStartDate, new { @id = "dtFinalRenewalStartDate" })
                                </td>
                                <td>
                                    @Html.LabelFor(m => m.FinalRenewalEndDate)
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.FinalRenewalEndDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.FinalRenewalEndDate), new { @id = "txtFinalRenewalEndDate", @class = "datepicker", style = "width:80px;" })
                                    @Html.HiddenFor(m => m.FinalRenewalEndDate, new { @id = "dtFinalRenewalEndDate" })
                                </td>
                            </tr>
                            <tr>
                                <td colspan="2">@Html.ValidationMessageFor(m => m.FinalRenewalStartDate)</td>
                                <td colspan="2">@Html.ValidationMessageFor(m => m.FinalRenewalEndDate)</td>
                            </tr>
                            <tr>
                                <td>
                                    @Html.LabelFor(m => m.EndAmount)
                                </td>

                                <td>
                                    @Html.TextBoxFor(m => m.EndAmount, new { @id = "txtEndAmount", @maxlength = "11", @class = "MaintainceTextbox", style = "width:80px;" })
                                    @Html.HiddenFor(m => m.EndAmount, new { @id = "dtEndAmount" })

                                </td>
                                <td>
                                    @Html.LabelFor(m => m.DeleteDate)
                                </td>
                                <td>
                                    @Html.TextBoxFor(m => m.DeleteDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.DeleteDate), new { @id = "txtDeleteDate", @class = "datepicker", style = "width:80px;" })
                                    @Html.HiddenFor(m => m.DeleteDate, new { @id = "dtDeleteDate" })
                                </td>
                            </tr>
                            <tr>
                                <td colspan="2">@Html.ValidationMessageFor(m => m.EndAmount)</td>
                                <td colspan="2">@Html.ValidationMessageFor(m => m.DeleteDate)</td>
                            </tr>
                            <tr>
                                <td style="padding-top: 5px; padding-bottom: 5px;">@Html.LabelFor(m => m.DeleteReason)</td>
                                <td colspan="3" style="padding-top: 7px; padding-bottom: 7px;">
                                    @Html.DropDownListFor(m => m.DeleteReason, new SelectList(Model.AuditReasonList, "ReasonCode", "ReasonDescription", Model.DeleteReason), "Select Termination Reason", new { @class = "MaintainceDropDownListBox", style = "width:98%;" })
                                </td>
                            </tr>
                        </table>
                    </fieldset>
                </td>
               
            </tr>

            <tr>
                <td colspan="6"></td>
            </tr>
            
            
            <tr>
                <td colspan="4" rowspan="2" style="vertical-align: top;">
                    <table style="width: 100%;">
                        <tr>
                            <td style="width: 47.5%;vertical-align: top;">
                                <table style="width: 100%;">
                                    <tr>
                                        <td style="width: 44.55%;">@Html.LabelFor(m => m.ProductId, new { @class = "mandatoryLabel" })</td>
                                        <td style="padding: 0px 0px 0px 0px">@Html.DropDownListFor(m => m.ProductId, new SelectList(Model.ProductList, "ProductId", " ProductName", Model.ProductId), "Select Product", new { @id = "ddlProducts", @class = "MaintainceDropDownListBox" })</td>
                                    </tr>
                                    <tr>
                                        <td colspan="2" style="padding: 5px 0px 0px 0px">@Html.ValidationMessageFor(m => m.ProductId)</td>

                                    </tr>
                                    <tr>
                                        <td>@Html.LabelFor(m => m.SubProductId, new { style = "" })</td>
                                        <td style="padding: 0px 0px 2px 0px; height: 38px">@Html.DropDownListFor(m => m.SubProductId, new SelectList(Model.SubProductList, "SubProductId", "Version", Model.SubProductId), "Select Sub Product", new { @id = "ddlSubProducts", @class = "MaintainceDropDownListBox"  })</td>
                                    </tr>
                                    <tr>
                                        <td>@Html.LabelFor(m => m.ReasonCode, new { @class = "mandatoryLabel", style = "" })</td>
                                        <td style="padding: 0px 0px 0px 0px">@Html.DropDownListFor(m => m.ReasonCode, new SelectList(Model.AuditReasonList, "ReasonCode", "ReasonDescription", Model.ReasonCode), "Select Reason", new { @class = "MaintainceDropDownListBox" })</td>
                                    </tr>
                                    <tr>
                                        <td colspan="2">@Html.ValidationMessageFor(m => m.ReasonCode)</td>
                                    </tr>
                                    <tr>
                                        <td style="padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;">@Html.LabelFor(m => m.ReasonDate)</td>
                                        <td style="padding: 3px 0px 0px 0px">@Html.TextBoxFor(m => m.ReasonDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.ReasonDate), new { @id = "txtActivationDate", @class = "datepicker" })
                                            @Html.HiddenFor(m => m.ReasonDate, new { @id = "dtActivationDate" })
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colspan="2">@Html.ValidationMessageFor(m => m.ReasonDate)</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Html.LabelFor(m => m.CreationDate, new { @class = "mandatoryLabel" })
                                        </td>
                                        <td style="padding: 0px 0px 0px 0px">
                                            @Html.TextBoxFor(m => m.CreationDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.CreationDate), new { @id = "txtCreateDate", @class = "datepicker"  })
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colspan="2">@Html.ValidationMessageFor(m => m.CreationDate)</td>
                                    </tr>
                                    <tr>
                                        <td style="width: 44.55%;">@Html.LabelFor(m => m.DocumentTypeId)</td>
                                        <td style="padding: 0px 0px 0px 0px">
                                            @Html.DropDownListFor(m => m.DocumentTypeId, new SelectList( new List<Object>{ 
                                                                               new { value = 1 , text = "Standard"  },
                                                                               new { value = 2 , text = "Deposit" }
                                                                               
                                                                            },
                                                                          "value",
                                                                          "text",
                                                                           Model.DocumentTypeId), new { @id = "ddlDocumentType", style = "width:85px;height:25px"  }) 
                                            @Html.HiddenFor(m => m.DocumentTypeId)
                                    </tr>
                                </table>
                            </td>
                            <td style="vertical-align: top;">
                                <table style="width: 100%;">
                                    <tr>
                                        <td style="height: 35px; vertical-align: top; width: 180px;">@Html.DropDownListFor(m => m.InvoiceAdvancedArrears, new SelectList(Model.InvoiceAdvancedList, "ID", "Value", Model.InvoiceAdvancedArrears), new { @id = "ddlInvoiceAdvanced", @class = "MaintainceDropDownListBox" })</td>
                                        @Html.HiddenFor(m => m.InvoiceAdvancedArrears)

                                        <td style="height: 35px; vertical-align: top;">@Html.DropDownListFor(m => m.InvoiceInAdvance, new SelectList(Model.InvoiceAdvancedValueList, "ID", "Value", Model.InvoiceInAdvance), new { @id = "ddlInvoiceAdvanceValue", style = "width:50px;height:25px" })
                                            @Html.HiddenFor(m => m.InvoiceInAdvance, new { @id = "invoiceInAdvanceId" })
                                            @Html.Label("Months")</td>                                        
                                    </tr>
                                    <tr>

                                        <td style="height: 25px;">
                                            @Html.LabelFor(m => m.IncludeInForecast, new { style = "padding-right:25px" })

                                            @Html.DropDownListFor(
                                                                   model => model.IncludeInForecast,
                                                                   new SelectList(
                                                                          new List<Object>{ 
                                                                               new { value = 1 , text = "Yes"  },
                                                                               new { value = 0 , text = "No" },
                                                                               new { value = -1 , text = "Cancel"}
                                                                            },
                                                                          "value",
                                                                          "text",
                                                                           Model.IncludeInForecast
                                                                   ), new { @id = "ddlBacklog", style = "width:85px;height:25px" }
                                                                )
                                        </td>

                                        <td style="height: 25px;">@Html.CheckBoxFor(m => m.UpliftRequired, new { @id = "chkUpliftRequired", style = "" }) @Html.LabelFor(m => m.UpliftRequired, new { style = "" })</td>
                                    </tr>
                                    <tr>
                                        <td>@Html.LabelFor(m => m.ForecastBillingStartDate)</td>
                                        <td style="">@Html.TextBoxFor(m => m.ForecastBillingStartDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.ForecastBillingStartDate), new { @id = "txtForecastBillingStartDate", @class = "datepicker" })</td>
                                        @Html.HiddenFor(m => m.ForecastBillingStartDate, new { @id = "dtForecastBillingStartDate" })
                                    </tr>
                                    <tr>
                                        <td colspan="2">@Html.ValidationMessageFor(m => m.ForecastBillingStartDate)</td>
                                    </tr>

                                    <tr>
                                        <td>@Html.LabelFor(m => m.FirstAnnualUpliftDate, new { style = "" })</td>
                                        <td style="">@Html.TextBoxFor(m => m.FirstAnnualUpliftDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.FirstAnnualUpliftDate), new { @id = "txtFirstAnnualUpliftDate", @class = "datepicker" })</td>
                                        @Html.HiddenFor(m => m.FirstAnnualUpliftDate, new { @id = "dtFirstAnnualUpliftDate" })
                                    </tr>
                                    <tr>
                                        <td colspan="2">@Html.ValidationMessageFor(m => m.FirstAnnualUpliftDate)</td>
                                    </tr>

                                    <tr>
                                        <td style="padding-top: 3px; padding-bottom: 3px;">@Html.LabelFor(m => m.InflationIndexId, new { style = "" })</td>
                                        <td style="height: 30px;">@Html.DropDownListFor(m => m.InflationIndexId, new SelectList(Model.InflationIndexList, "InflationIndexId", "InflationIndexNameDesc", Model.InflationIndexId), "Select Index", new { @id = "dtInflationIndex", @class = "MaintainceDropDownListBox", data_text = false })</td>
                                    </tr>
                                    <tr>
                                        <td>@Html.LabelFor(m => m.InflationFixedAdditional)</td>
                                        @*<td style="padding: 0px 0px 0px 6px">@Html.EditorFor(m => m.InflationFixedAdditional, new { @maxlength = "6", @id = "txtInflationFixedAdditional", @class = "MaintainceTextbox" })</td>*@
                                        <td>@Html.TextBoxFor(m => m.InflationFixedAdditional, @ACS.MDB.Net.App.Common.Constants.STRING_FORMAT_FOR_NUMERIC_VALUE, new { @maxlength = "5", @id = "txtInflationFixedAdditional", @class = "MaintainceTextbox" })</td>
                                    </tr>
                                    <tr>
                                        <td colspan="2">@Html.ValidationMessageFor(m => m.InflationFixedAdditional)</td>
                                    </tr>
                                </table>
                            </td>
                        </tr>
                    </table>
                    <table style="width: 100%; margin-top: 0px;">
                        <tr>
                            <td style="width: 21%;">@Html.LabelFor(m => m.Comment)</td>
                            <td style="padding: 0px;">@Html.TextAreaFor(m => m.Comment, 2, 1, new { @id = "txtComment", @maxlength = "300", style = "width:532px; resize: none; padding:0px;" })
                                <br />@Html.ValidationMessageFor(m => m.Comment, "", new { style = "padding:0px 0px 0px 0px" })
                            </td>
                        </tr>
                        
                        <tr>
                            <td style="width: 21%;">@Html.LabelFor(m => m.CustomerComment) </td>
                        @if(string.IsNullOrEmpty(Model.CustomerComment)){
                            <td style="padding: 0px;"><b>@Html.TextAreaFor(m => m.CustomerComment, 2, 1, new { @id = "txtCustomerNotes", @readonly = true, @class = "readOnlyTextBox", style = "width:522px;height:25px;resize: none;" })</b></td>
                        }
                        else
                        {
                             <td style="padding: 0px;"><b>@Html.TextAreaFor(m => m.CustomerComment, 2, 1, new { @id = "txtCustomerNotes", @readonly = true, style = "width:522px;height:25px;resize: none;color:blue;font-weight:bold;background-color:yellow" })</b></td>
                        }
                     
                        </tr>
                    </table>
                </td>

                <td colspan="2" rowspan="12" style="padding: 0px 40px 0px 0px; vertical-align: top">
                    @Html.Partial("_MaintainceBillingLines")
                    
                    @*ARBS-139: to show last changed by and date*@
                    @if (Model.ID != 0)
                    {
                        <br />
                        @Html.DisplayNameFor(m => m.LastUpdatedBy)
                        @Html.DisplayFor(m => m.LastUpdatedByEmailId)
                        <br />
                        @Html.DisplayNameFor(m => m.LastUpdatedDate)
                        @Html.DisplayFor(m => m.LastUpdatedDate, string.Format(@ACS.MDB.Net.App.Common.Constants.DATE_FORMAT_FOR_VIEWPAGE, Model.LastUpdatedDate))
                    }
                </td>

            </tr>
           
        </table>
        <div id="spinnerContractMaintenance" style="display: none; width: 100%; height: 100%; position: fixed; text-align: center; border: 0px; vertical-align: central; left: 0; top: 0; z-index: 1000; background: rgb(255,255,255) url('/Images/Loading.gif') 50% 50% no-repeat; -ms-filter: 'alpha(opacity = 50)'; filter: alpha(opacity=50); opacity: 0.6; }">
        </div>
    }
</div>


<script type="text/javascript">

    //Disable Save button of pop up for viewer
    DisableSaveButton();
    SetFocus('#ddlContractLine');
    DisableBackspaceKeyForControl('#txtFirstPeriodAmount');
    DisableBackspaceKeyForControl('#txtCustomerNotes');
    DisableInvalidKeyForControl('#txtComment');
    //DisableInvalidKeyForControl('#txtTerminationReason');

    BacklogValue = $("#ddlBacklog").val();
  
    var frequency = 0;
    var todayDate = 0;
    var d = new Date();
    var date = d.getDate();
    var month = d.getMonth()+1 ;
    var year = d.getFullYear();

    //current date
    todayDate = date + "/" + month + "/" + year;

    function SaveMaintenenceDetails() {

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveMaintenanceDetails", "Contract")',
            data: ({ model: 1 }),
            error: function (request, status, error) {
                alert("Something wrong here!");
                return false;
            },
            success: function (returnData) {
            }
        });
    }

    $(document).ready(function () {
        $('.datepicker').datepicker({
            //showOn: 'button',
            //buttonImage: '../../images/Calender1.png',
            showOptions: { speed: 'fast' },
            //buttonImageOnly: true,
            //changeDay: true,
            changeMonth: true,
            changeYear: true,
            dateFormat: 'dd/mm/yy',
            gotoCurrent: true,
            onClose: function () {
                $(this).valid();
                //to display today's date as Delete date when user selects Date from End Date datepicker
                if (this.id == 'txtFinalRenewalEndDate') {
                    var finalRenewalEndDate = $('#txtFinalRenewalEndDate').val();
                    if (finalRenewalEndDate == "") {
                        $('#txtDeleteDate').val(null);
                    } else {
                        $('#txtDeleteDate').datepicker('setDate', new Date());
                        //$('#txtDeleteDate').val(todayDate);
                    }
                }
            },
        });

        //ARBS-137-On creating new billing line ForecastBillingStartDate must be disable
        $("#txtForecastBillingStartDate").prop('disabled', true);
        $("#txtForecastBillingStartDate").addClass('readOnlyTextBox');

        DisableControlsIfMilestonesAvailable();

        // function called to handle the change in selection
        // of a products.                        
        $("#ddlProducts").change(function () {

            var selectedProductId = $(this).val();

            if (selectedProductId != -1 && selectedProductId != 0) {

                var postData = { productId: selectedProductId };

                //Get sub product list based on selected company id
                $.post("/Contract/GetSubproductListAsJson", postData, function (response) {

                    if (response != null) {
                        $("#ddlSubProducts").empty();
                        $("#ddlSubProducts").length = -1;

                        if (response != '') {
                        AddOption("Select Sub Product", "-1", "#ddlSubProducts");
                        }
                        else if (response == '') {
                            AddOption("No Sub Product exists", "-1", "#ddlSubProducts");
                        }

                        //AddOption("Select Sub Product", "-1", "#ddlSubProducts");
                        for (var i in response) {
                            AddOption(response[i].Version, response[i].SubProductId, "#ddlSubProducts");
                        }
                    }
                });
            }
            else {
                $("#ddlSubProducts").empty();
                AddOption("Select Sub Product", "-1", "#ddlSubProducts");
            }
        })

        // function called to handle the change in selection
        // of a period frequency.                        
        $("#ddlPeriodFrequency").change(function () {
            var backlogStatus = $("#ddlBacklog").val();
            if (backlogStatus == '1' || backlogStatus == '-1') {
                $('#txtEndAmount').val('0.00');
            }
            else {
                $('#txtEndAmount').val('');
            }
            SetFirstPeriodAmount($('#txtBaseAmount').val());
            SetFirstPeriodAmountForCreditAndAdhoc($('#txtBaseAmount').val());
        })

        //To handle change event of Invoice in Advanced
        $("#ddlInvoiceAdvanced").change(function () {

            if ($(this).children('option').filter(':selected').text() == "Invoice on Renewal Date") {

                $("#ddlInvoiceAdvanceValue").val(0).selected = true;
                $("#invoiceInAdvanceId").val('0');                
                $("#ddlInvoiceAdvanceValue").prop('disabled', true);
            }
            else if ($(this).children('option').filter(':selected').text() != "Invoice on Renewal Date") {
                $("#ddlInvoiceAdvanceValue").prop('disabled', false);
            }
        })

        //Fire an event on lost focus of base amount
        $('#txtBaseAmount').focusout(function () {
            SetFirstPeriodAmount($('#txtBaseAmount').val());
            SetFirstPeriodAmountForCreditAndAdhoc($('#txtBaseAmount').val());
        });

        //Fire an event on lost focus of base amount
        $('#txtEndAmount').focusout(function () {
            SetFirstPeriodAmountForCreditAndAdhoc($('#txtEndAmount').val());
        });

        $("#chkUpliftRequired").change(function () {

            if (this.checked == false) {

                var answer = confirm('@ACS.MDB.Net.App.Common.Constants.UNCHECK_UPLIFT_REQUIRE_MESSAGE');
                if (answer) {

                    $('#txtFirstAnnualUpliftDate').val('');
                    $("#dtInflationIndex")[0].selectedIndex = 0;
                    $('#txtInflationFixedAdditional').val('');
                }
                else {
                    this.checked = true;
                }
            }
        })

        //To handle change event of Backlog/Include in Forecast
        $("#ddlBacklog").change(function () {
            
            var selectedBacklogValue = '';
            selectedBacklogValue = $(this).children('option').filter(':selected').text();

            if ((selectedBacklogValue == "Yes") || (selectedBacklogValue == "Cancel")) {
                var msg;
                if ('@Model.MileStoneCount' == 0) {
                    msg = confirm('@ACS.MDB.Net.App.Common.Constants.BACKLOG_WARNING_NO_MILESTONE');
                }
                else if ('@Model.MilestoneStatusCount' == 0) {
                    msg = confirm('@ACS.MDB.Net.App.Common.Constants.BACKLOG_WARNING_WITH_MILESTONE');
                }
                else {
                    alert('@ACS.MDB.Net.App.Common.Constants.BACKLOG_WARNING_NOT_ALLOW_TO_CHANGE');
                }

            if (msg) {
                
                if ('@Model.MilestoneStatusCount' == 0) {
                    
                    $('#txtFirstPeriodStartDate').val('');
                    $('#txtFirstRenewalDate').val('');
                    $('#txtFinalRenewalStartDate').val('');
                    $('#txtFinalRenewalEndDate').val('');
                    $('#txtDeleteDate').val('');
                    //ARBS-132 Error when adding Credit/Adhoc item to backlog
                    var selectedPeriodFrequency = $("#ddlPeriodFrequency").val();
                 
                    if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.AD_HOC)'
                         || selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.CREDIT)') {
                        $('#txtEndAmount').val();
                    }
                    else {
                        $('#txtEndAmount').val('0.00');
                    }
                    $('#txtFirstAnnualUpliftDate').val('');
                    $('#txtActivationDate').val('');
                    //$('#txtTerminationReason').val('');

                    //Clear all date controls associated hidden field value
                    $('#dtFirstPeriodStartDate').val('');
                    $('#dtFirstRenewalDate').val(null);
                    $('#dtFinalRenewalStartDate').val(null);
                    $('#dtFinalRenewalEndDate').val(null);
                    $('#dtDeleteDate').val(null);
                    // $('#dtEndAmount').val('0');

                    $('#dtFirstAnnualUpliftDate').val(null);
                    $('#dtActivationDate').val(null);
                    //$('#dtTerminationReason').val(null);

                    $('#txtFirstAnnualUpliftDate').addClass('readOnlyTextBox');
                    $('#txtFirstPeriodStartDate').addClass('readOnlyTextBox');
                    $('#txtFirstRenewalDate').addClass('readOnlyTextBox');
                    $('#txtFinalRenewalStartDate').addClass('readOnlyTextBox');
                    $('#txtFinalRenewalEndDate').addClass('readOnlyTextBox');
                    $('#txtActivationDate').addClass('readOnlyTextBox');
                    $('#txtDeleteDate').addClass('readOnlyTextBox');
                    $('#txtEndAmount').addClass('readOnlyTextBox');
                    $('#txtEndAmount').attr('readonly', true);
                    //$('#txtTerminationReason').addClass('readOnlyTextBox');

                    $('#txtFirstAnnualUpliftDate').prop('disabled', true);
                    $('#txtFirstPeriodStartDate').prop('disabled', true);
                    $('#txtFirstRenewalDate').prop('disabled', true);
                    $('#txtFinalRenewalStartDate').prop('disabled', true);
                    $('#txtFinalRenewalEndDate').prop('disabled', true);
                    $('#txtActivationDate').prop('disabled', true);
                    $('#txtDeleteDate').prop('disabled', true);
                    //$('#txtActivationDate').val('');
                    //$('#txtEndAmount').prop('disabled', true);
                    //$('#txtTerminationReason').prop('disabled', true);

                    //ARBS-137-When backlog status yes/cancel ForecastBillingStartDate is enabled and is mandatory
                    //and set ForecastBillingStartDate as currentdate+3 months date
                    $("#txtForecastBillingStartDate").prop('disabled', false);
                    $("#txtForecastBillingStartDate").removeClass('readOnlyTextBox');

                    //to set today's+3 months date as default on every Backlog status Yes/Cancel 
                    d = new Date();
                    d.setMonth(d.getMonth() + 3);
                    month = d.getMonth() + 1;
                    var threeMonthsDate = d.getDate() + "/" + month + "/" + d.getFullYear();
                    $("#txtForecastBillingStartDate").val(threeMonthsDate);


                }
                
                BacklogValue = $(this).val();
            }
            else {
                $("#ddlBacklog").val(BacklogValue);
            }
        }
        else if (selectedBacklogValue == "No") {
            BacklogValue = $(this).val();
            $('#txtFirstPeriodStartDate').removeClass('readOnlyTextBox');
            $('#txtFirstRenewalDate').removeClass('readOnlyTextBox');
            $('#txtFinalRenewalStartDate').removeClass('readOnlyTextBox');
            $('#txtFinalRenewalEndDate').removeClass('readOnlyTextBox');
            $('#txtDeleteDate').removeClass('readOnlyTextBox');
            $('#txtEndAmount').removeClass('readOnlyTextBox');
            $('#txtEndAmount').attr('readonly', false);
            $('#txtFirstAnnualUpliftDate').removeClass('readOnlyTextBox');
            $('#txtActivationDate').removeClass('readOnlyTextBox');
            //$('#txtTerminationReason').removeClass('readOnlyTextBox');

            $('#txtFirstPeriodStartDate').prop('disabled', false);
            $('#txtFirstRenewalDate').prop('disabled', false);
            $('#txtFinalRenewalStartDate').prop('disabled', false);
            $('#txtFinalRenewalEndDate').prop('disabled', false);
            $('#txtDeleteDate').prop('disabled', false);
            $('#txtEndAmount').prop('disabled', false);
           
            $('#txtFirstAnnualUpliftDate').prop('disabled', false);
            $('#txtActivationDate').prop('disabled', false);

            //ARBS-98-Assign today's date to Activation date
            //$('#txtActivationDate').val(todayDate);
            $('#txtActivationDate').datepicker('setDate', new Date());
            //ARBS-137-when backlog status-No, ForecastBillingStartDate is disabled
            $("#txtForecastBillingStartDate").prop('disabled', true);
            $("#txtForecastBillingStartDate").addClass('readOnlyTextBox');
        }
        })

        //ARBS-98 to display current date as Delete Date when End Date is entered
        $('#txtFinalRenewalEndDate').on('blur', function () {
            var finalRenewalEndDate = $('#txtFinalRenewalEndDate').val();
            if (finalRenewalEndDate == "") {
                $('#txtDeleteDate').val(null);
            }
            else if (finalRenewalEndDate.match(/^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$/)) {
                //$('#txtDeleteDate').val(todayDate);
                $('#txtDeleteDate').datepicker('setDate', new Date());
            }
            else {
                $('#txtDeleteDate').val(null);
                $('#txtFinalRenewalEndDate').val(null);
                alert("Please enter proper date");
            }
        });


        //For edit Contract maintenance 
        if ('@Model.ID' > 0) {

            //Set Focust on Base amount
            //SetFocus('#txtBaseAmount');

            //Disable First Period start date, Final billing period end date and charge frequency if billing line is grouped
            if ('@Model.IsGrouped' == 'True')
            {
                $('#txtFirstPeriodStartDate').prop('disabled', true);
                $('#txtFirstRenewalDate').prop('disabled', true);
                $('#txtFinalRenewalEndDate').prop('disabled', true);
                $("#ddlPeriodFrequency").prop('disabled', true);
                $("#ddlDocumentType").prop('disabled', true);
                $("#ddlInvoiceAdvanced").prop('disabled', true);
                $("#ddlInvoiceAdvanceValue").prop('disabled', true);
                $('#txtFirstPeriodStartDate').addClass('readOnlyTextBox');
                $('#txtFirstRenewalDate').addClass('readOnlyTextBox');
                $('#txtFinalRenewalEndDate').addClass('readOnlyTextBox');                
                $("#ddlPeriodFrequency").addClass('readOnlyTextBox');
                $("#ddlDocumentType").addClass('readOnlyTextBox');
                $("#ddlInvoiceAdvanced").addClass('readOnlyTextBox');
                $("#ddlInvoiceAdvanceValue").addClass('readOnlyTextBox');
                //Khushboo
                $("#ddlBacklog").prop('disabled', true);
                $("#ddlBacklog").addClass('readOnlyTextBox');

                //Disable FinalRenewalStartDate when charge frequency is Credit or Ad-hoc
                var selectedPeriodFrequency = $("#ddlPeriodFrequency").val();
                if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.AD_HOC)'
                     || selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.CREDIT)') {
                    $('#txtFinalRenewalStartDate').prop('disabled', true);
                    $('#txtFinalRenewalStartDate').addClass('readOnlyTextBox');
                }

            }

            if ('@Model.InvoiceAdvancedArrears' == 0) {
                $("#ddlInvoiceAdvanceValue").prop('disabled', true);
            }

            //If Backlog is Yes or Cancel then dates are disabled
            if ('@Model.IncludeInForecast' == '1' || '@Model.IncludeInForecast' == '-1') {

                if ('@Model.MilestoneStatusCount' == 0) {

                    if ('@Model.FirstPeriodStartDate.HasValue' == 'False') {
                        $('#txtFirstPeriodStartDate').val('');
                        $('#dtFirstPeriodStartDate').val('');
                    }

                    if ('@Model.FirstRenewalDate.HasValue' == 'False') {
                        $('#txtFirstRenewalDate').val('');
                        $('#dtFirstRenewalDate').val('');
                    }

                    if ('@Model.FinalRenewalStartDate.HasValue' == 'False' && '@Model.FinalRenewalEndDate.HasValue' == 'False') {
                        $('#txtFinalRenewalStartDate').val('');
                        $('#dtFinalRenewalStartDate').val('');

                        $('#txtFinalRenewalEndDate').val('');
                        $('#dtFinalRenewalEndDate').val('');
                    }

                    if ('@Model.DeleteDate.HasValue' == 'False') {
                        $('#txtDeleteDate').val('');
                        $('#dtDeleteDate').val('');
                    }
                 
                    //Commented to show EndAmount when record is at Backlog for Credit/Adhoc charge frequency
                   @* if ('@Model.EndAmount.HasValue' == 'False') {
                        $('#txtEndAmount').val('0');
                        $('#dtEndAmount').val('0');
                    }*@

                    if ('@Model.FirstAnnualUpliftDate.HasValue' == 'False') {
                        $('#txtFirstAnnualUpliftDate').val('');
                        $('#dtFirstAnnualUpliftDate').val(null);
                    }

                    if ('@Model.ReasonDate.HasValue' == 'False') {
                        $('#txtActivationDate').val('');
                        $('#dtActivationDate').val(null);
                    }


        @*                    if ('@Model.TerminationReason' == null) {
                        $('#txtTerminationReason').val('');
                        $('#dtTerminationReason').val(null);
                    }*@
                }

                $('#txtFirstAnnualUpliftDate').addClass('readOnlyTextBox');
                $('#txtFirstPeriodStartDate').addClass('readOnlyTextBox');
                $('#txtFirstRenewalDate').addClass('readOnlyTextBox');
                $('#txtFinalRenewalStartDate').addClass('readOnlyTextBox');
                $('#txtFinalRenewalEndDate').addClass('readOnlyTextBox');
                $('#txtActivationDate').addClass('readOnlyTextBox');
                $('#txtDeleteDate').addClass('readOnlyTextBox');
                $('#txtEndAmount').addClass('readOnlyTextBox');
                $('#txtEndAmount').attr('readonly', true);
                //$('#txtTerminationReason').addClass('readOnlyTextBox');

                $('#txtFirstAnnualUpliftDate').prop('disabled', true);
                $('#txtFirstPeriodStartDate').prop('disabled', true);
                $('#txtFirstRenewalDate').prop('disabled', true);
                $('#txtFinalRenewalStartDate').prop('disabled', true);
                $('#txtFinalRenewalEndDate').prop('disabled', true);
                $('#txtActivationDate').prop('disabled', true);
                $('#txtDeleteDate').prop('disabled', true);
                //$('#txtEndAmount').prop('disabled', true);
                //$('#txtTerminationReason').prop('disabled', true);

                $('#txtForecastBillingStartDate').removeClass('readOnlyTextBox');
                $('#txtForecastBillingStartDate').prop('disabled', false);
                    
            }
        }

        ///Function to disable controls if Milestone available
        function DisableControlsIfMilestonesAvailable() {
            if ('@Model.MileStoneCount' > 0 && '@Model.ID' > 0) {
                if ('@Model.PeriodFrequency' != null) {
                    $("#ddlPeriodFrequency").prop('disabled', true);
                    $("#ddlPeriodFrequency").addClass('readOnlyTextBox');
                }

                if ('@Model.FirstPeriodStartDate.HasValue' != 'False') {
                    $("#txtFirstPeriodStartDate").addClass('readOnlyTextBox');
                    $('#txtFirstPeriodStartDate').prop('disabled', true);
                }

                if ('@Model.FirstRenewalDate' != null) {
                    $("#txtFirstRenewalDate").addClass('readOnlyTextBox');
                    $('#txtFirstRenewalDate').prop('disabled', true);
                }

                if ('@Model.FinalRenewalStartDate.HasValue' != 'False' && '@Model.FinalRenewalEndDate.HasValue' != 'False' && '@Model.MilestoneStatusCountForLinkLoaded' != 'False') {
                    $("#txtFinalRenewalStartDate").addClass('readOnlyTextBox');
                    $('#txtFinalRenewalStartDate').prop('disabled', true);

                    $("#txtFinalRenewalEndDate").addClass('readOnlyTextBox');
                    $('#txtFinalRenewalEndDate').prop('disabled', true);
                }

                if ('@Model.DeleteDate.HasValue' != 'False' && '@Model.MilestoneStatusCountForLinkLoaded' != 'False') {
                    $("#txtDeleteDate").addClass('readOnlyTextBox');
                    $('#txtDeleteDate').prop('disabled', true);
                }

                //Commented this code to Allow user to edit End amount even milestones are available
@*                if ('@Model.EndAmount.HasValue' != 'False') {
                    $("#txtEndAmount").addClass('readOnlyTextBox');
                    $('#txtEndAmount').prop('disabled', true);
                }*@
            }
        }
    });




    //Set first period amount (To decimal places)
    function SetFirstPeriodAmount(baseAmount) {
        if (baseAmount > 0) {

            SetChargingFrequency();
            if (frequency == 0) {

                $('#txtFirstPeriodAmount').val('0.00');
            }
            else {

                var selectedPeriodFrequency = $("#ddlPeriodFrequency").val();
                if (selectedPeriodFrequency != '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.AD_HOC)'
                    && selectedPeriodFrequency != '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.CREDIT)') {

                    $('#txtFirstPeriodAmount').val((baseAmount / frequency).toFixed(2));
@*                    if ('@Model.ID' > 0) {
                        if ($('#txtEndAmount').val() != '') {
                            $('#txtEndAmount').val();
                        }
                        else if ($('#txtEndAmount').val() == '') {
                            $('#txtEndAmount').val('');
                        }
                }
                else {
                        $('#txtEndAmount').val('');
                    }*@
                }
            }
        }
        else {

            var selectedPeriodFrequency = $("#ddlPeriodFrequency").val();
            if (selectedPeriodFrequency != '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.AD_HOC)' 
                && selectedPeriodFrequency != '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.CREDIT)') {
                $('#txtFirstPeriodAmount').val('0.00');
            }
        }
    }

    //Set first period amount (To decimal places)
    function SetFirstPeriodAmountForCreditAndAdhoc(baseAmount) {
        if (baseAmount != 0) {
            var selectedPeriodFrequency = $("#ddlPeriodFrequency").val();
            if ((selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.AD_HOC)')
                                    || (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.CREDIT)')) {
                $('#txtFirstPeriodAmount').val((baseAmount / 1).toFixed(2));
                $('#txtEndAmount').val((baseAmount / 1).toFixed(2));

            }

            //if ($('#txtFirstPeriodAmount').val() == 'NaN') {
            //    $('#txtFirstPeriodAmount').val('0.00');
            //}
        }
        else {
            var selectedPeriodFrequency = $("#ddlPeriodFrequency").val();
            if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.AD_HOC)'
                            && selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.CREDIT)') {
                $('#txtFirstPeriodAmount').val('0.00');
            }

        }
    }


    //Set charging frequency
    function SetChargingFrequency() {
        var selectedPeriodFrequency = $("#ddlPeriodFrequency").val();
        //alert(selectedPeriodFrequency);
        //Set default
        frequency = 0;

        if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.MONTHLY)') {
            frequency = 12;
        }
        else if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.QUARTERLY)') {

            frequency = 4;
        }
    else if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.HALF_YEARLY)') {

            frequency = 2;
        }
    else if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.YEARLY)') {

            frequency = 1;
        }
    else if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.AD_HOC)') {

            frequency = 1;
        }
    else if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.CREDIT)') {

            frequency = 1;
        }
    else if (selectedPeriodFrequency == '@Convert.ToInt32(@ACS.MDB.Net.App.Common.Constants.ChargeFrequency.BI_MONTHLY)') {

            frequency = 6;
        }
    }

    function confirmDelete(message, callback) {
        var $closeDialog = $('<div>Are you sure you want to close ?</div>');

        $closeDialog
            .dialog({
                resizable: false,
                height: 160,
                title: "Confirm",
                modal: true,
                buttons: {
                    "NO": function () {
                        $(this).dialog("close");
                        callback.apply();
                    },
                    Yes: function () {
                        //window.location.href = "@Url.Action("ContractDetails", "Contract", new { contractId = @ViewBag.contractId })";
                        $(this).closest(".dialog").dialog("close");
                        alert('hi');
                    }
                }
            });
        };

        function ClosePopup() {
            //document.getElementById("aboutlDialog");
            //document.getElementById("aboutlDialog").style.visibility = "hidden";

            confirmDelete('',
                function () {
                    $(this).dialog(parent).dialog("close");
                });

            $(this).closest(".dialog").dialog("close");

            e.preventDefault();
            $(this).closest(".dialog").dialog("close");

            //redirect to contract details page
            //window.location.href = "@Url.Action("ContractDetails", "Contract", new { contractId = @ViewBag.contractId })";
        }

    $("#btnCancel").live('click', function (event) {
        event.preventDefault();
    });

    function confirmDelete(message, callback) {
        var $deleteDialog = $('<div>Are you sure you want to cancel ' + message + '?</div>');

        $deleteDialog
            .dialog({
                resizable: false,
                height: 140,
                title: "Close",
                modal: true,
                buttons: {
                    "NO": function () {
                        $(this).dialog("close");
                        callback.apply();
                    },
                    Yes: function () {
                        //$(this).dialog("close");
                        $(this).closest(".dialog").dialog("close");
                        //window.location.href = "@Url.Action("ContractDetails", "Contract", new { contractId = @ViewBag.contractId })";
                    }
                }
            });
    };

</script>
